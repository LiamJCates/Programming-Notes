Programming paradigms are a way to classify programming languages based on their features. Languages can be classified into multiple paradigms.

Some paradigms are concerned mainly with implications for the execution model of the language, such as allowing side effects, or whether the sequence of operations is defined by the execution model. Other paradigms are concerned mainly with the way that code is organized, such as grouping a code into units along with the state that is modified by the code. Yet others are concerned mainly with the style of syntax and grammar.




There are two main approaches to programming:

Imperative programming – how to execute, defines control flow as statements that change a program state.

Declarative programming – what to execute, defines program logic, but not detailed control flow.


Both of these approaches have a variety of paradigms that 


Imperative
  Procedural programming, structured programming – specifies the steps a program must take to reach a desired state.

  Object-oriented programming – organizes programs as objects: data structures consisting of datafields and methods together with their interactions.

  Parallel Processing Approach -


Declarative
  Functional programming – treats programs as evaluating mathematical functions and avoids state and mutable data

  Logical programming -

  Database Processing Approach -




Common programming paradigms include:



declarative in which the programmer merely declares properties of the desired result, but not how to compute it
    functional in which the desired result is declared as the value of a series of function applications,

    logic in which the desired result is declared as the answer to a question about a system of facts and rules,

    mathematical in which the desired result is declared as the solution of an optimization problem








Structured





Declarative
