Class Design

Although there is no syntactic rule that enforces it, a well-designed class should define one and only one logical entity.

Objects are generally composed of...
■ things the object knows: The object's state represented by its instance variables
■ things the object does: The object's behavior represented by its methods

To work with OOP, you should be able to identify three key characteristics of objects:
The object’s behavior—what can you do with this object, or what methods can you apply to it?
The object’s state—how does the object react when you invoke those methods?
The object’s identity—how is the object distinguished from others that may have the same behavior and state?
All objects that are instances of the same class share a family resemblance by supporting the same behavior. The behavior of an object is defined by the methods that you can call.

An object knows things and does things.
Things an object knows about itself are called instance variables. They represent the state of an object.
Things an object does are called methods. They represent the behavior of an object.

An object’s state may change over time, but not spontaneously. A change in the state of an object must be a consequence of method calls. However, the state of an object does not completely describe it, because each object has a distinct identity. For example, in an order processing system, two orders are distinct even if they request identical items. Notice that the individual objects that are instances of a class always differ in their identity and usually differ in their state.

An object is a self-contained component of a computer program that represents a related group of features and is designed to accomplish specific tasks. A well-designed object does the minimum required to get its job done. If an object has too much to do, that’s a sign its job could be divided into two or more objects.


Developing a Class
o Figure out what the class is supposed to do.
o List the instance variables and methods.
o Write prepcode for the methods. (You’ll see this in just a moment.)
o Write test code for the methods.
o Implement the class.
o Test the methods.
o Debug and reimplement as needed.


The three things we’ll write for each class:
prep code    A form of pseudocode, to help you focus on the logic without stressing about syntax.
test code    A class or methods that will test the real code and validate that it’s doing the right thing.
real code    The actual implementation of the class. This is where we write real Java code.

One common way to design object-oriented applications is to divide the application into several distinct layers or tiers that provide distinct types of functions.

Most common is a three-layered approach. Here the objects of an application are split into three basic layers:

» Presentation:
The objects in this layer handle all the direct interaction with users. The HTML pages in a web application go in this layer, as do the Swing page and frame classes in a GUI-based application.

» Logic:
The objects in this layer represent the core objects of the application. For a typical business-type application, this layer includes objects that represent business entities such as customer, products, orders, suppliers, and the like. This layer is sometimes called the business rules layer because the objects in this layer are responsible for carrying out the rules that govern the application.

» Database: The objects in this layer handle all the details of interacting with whatever form of data storage is used by the application. If the data is stored in a SQL database, for example, the objects in this layer handle all the SQL.
Class-Design Guidelines
Class-design guidelines are helpful for designing sound classes.

Cohesion
A class should describe a single entity, and all the class operations should logically fit together to support a coherent purpose. You can use a class for students, for example, but you should not combine students and staff in the same class, because students and staff are different entities. A single entity with many responsibilities can be broken into several classes to separate the responsibilities.

Consistency
Follow standard Java programming style and naming conventions. Choose informative names for classes, data fields, and methods. A popular style is to place the data declaration before the constructor, and place constructors before methods. Make the names consistent. It is not a good practice to choose different names for similar operations. For example, the length() method returns the size of a String, a StringBuilder, and a StringBuffer. It would be inconsistent if different names were used for this method in these classes. In general, you should consistently provide a public no-arg constructor for constructing a default instance. If a class does not support a no-arg constructor, document the reason. If no constructors are defined explicitly, a public default no-arg constructor with an empty body is assumed. If you want to prevent users from creating an object for a class, you can declare a private constructor in the class,

Encapsulation
A class should use the private modifier to hide its data from direct access by clients. This makes the class easy to maintain. Provide a getter method only if you want the data field to be readable and provide a setter method only if you want the data field to be updateable.

Clarity
Cohesion, consistency, and encapsulation are good guidelines for achieving design clarity. In
addition, a class should have a clear contract that is easy to explain and easy to understand.
Users can incorporate classes in many different combinations, orders, and environments.
Therefore, you should design a class that imposes no restrictions on how or when the user can
use it, design the properties in a way that lets the user set them in any order and with any
combination of values, and design methods that function independently of their order of occurrence.
Methods should be defined intuitively without causing confusion.
You should not declare a data field that can be derived from other data fields. For example, the following Person class has two data fields: birthDate and age. Since age can be derived from birthDate, age should not be declared as a data field.

Completeness
Classes are designed for use by many different customers. In order to be useful in a wide range of applications, a class should provide a variety of ways for customization through properties and methods. For example, the String class contains more than 40 methods that are useful for a variety of applications.

Instance vs. Static
A variable or method that is dependent on a specific instance of the class must be an instance
variable or method. A variable that is shared by all the instances of a class should be declared
static.
Always reference static variables and methods from a class name (rather than a reference variable) to improve readability and avoid errors. Do not pass a parameter from a constructor to initialize a static data field. It is better to use a setter method to change the static data field.

Instance and static are integral parts of object-oriented programming. A data field or method is either instance or static. Do not mistakenly overlook static data fields or methods. It is a common design error to define an instance method that should have been static.

A constructor is always instance because it is used to create a specific instance. A static variable or method can be invoked from an instance method, but an instance variable or method cannot be invoked from a static method.


Relationships Between Classes

Three relationships are common among classes:
• Dependency ("uses-a")
• Aggregation ("has-a")
• Inheritance ("is-a")

Dependency
A class depends on another class if it manipulates objects of the other class in any way.
If a class can carry out all of its tasks without being aware that the other class even exists, then it doesn't use that class.
This shows that dependency is an asymmetric relationship.

One important design goal is to minimize the number of dependency relationships; that is, to minimize the coupling between classes.
If one class is unaware of the existence of another, it is also unconcerned about any changes in that other class.
A low degree of coupling tends to make it much easier to implement changes in the future.

Aggregation
Aggregation takes place if objects of one class contain objects of another class over a period of time.
Aggregation is a special case of dependency. Of course, if a class contains objects of another class, then it is acutely aware of the existence of that class. Aggregation is often informally described as the "has-a" relationship. A message queue has a message

With aggregation relationships, it is useful to keep track of these multiplicities. There may be a 1:1 or l:n relationship.
Aggregation is usually implemented through instance fields. This particular implementation can serve as a 1:1 or 1 :0 ... 1 relationship (if you allow myObject == null to indicate that there is no object).
For a 1:n relationship, you need an array or a collection object.

Inheritance

A class inherits from another if all objects of its class are special cases of objects of the other class, capable of exhibiting the same behavior but possibly with additional responsibilities and a richer state.

We call the more general class the superclass and the more specialized class the subclass. A subclass object must be usable in all situations in which a superclass object is expected.

Inheritance is often called the "is-a" relationship. This intuitive notion makes it easy to distinguish inheritance from aggregation. However, we must point out that inheritance is much less common than the dependency and aggregation relationships. Many designs can best be modeled by employing inheritance in a few selected places.
