Collision
The hashing function maps a potentially infinite number of key values to some finite number of index locations. T

A collision is a situation which occurs when a hash function maps two
different keys to a single/same location in the hash table. Suppose we want
to store a record at one location. Now, another record cannot be stored at
the same location as it is obvious that two records cannot be stored at the
same location. Thus, there are methods to solve this problem, which are
called collision resolution techniques.


Collision Resolution Techniques
As already discussed, collision resolution techniques are used to overcome the problem of collision in hashing. There are two popular methods
which are used for resolving collisions:
1. Collision Resolution by Chaining Method
2. Collision Resolution by Open Addressing Method
Now, we will discuss these methods in detail.


Chaining Method
In the chaining method, a chain of elements is maintained
which have the same hash address. The hash table here behaves like an array of pointers. Each location in the hash table
stores a pointer to the linked list, which contains all the key elements that were hashed to that location.

Advantages and Disadvantages of the Chained Method
The main advantage of this method is that it completely resolves the
problem of collision. It remains effective even when the key elements to be
stored in the hash table are higher than the number of locations in the hash
table. However, it is quite obvious that with the increase in the number of
key elements, the performance of this method will decrease.
The disadvantage of this method is the wastage of storage space as
the key elements are stored in the linked list; in addition, the pointers are
required for each element to get accessed, which in turn are consuming
more space.



Open Addressing Method
In the open addressing method, all the elements are stored in the hash
table itself. There is no need to provide the pointers in this method, which
is the biggest advantage of this method. Once a collision takes place, open
addressing computes new locations using the probe sequence, and the next
element or next record is stored on that location. Probing is the process of
examining the memory locations in the hash table. When we perform the
insertion operation in the open addressing method, we first successively
probe/examine the hash table until we find an empty slot in which the new
key can be inserted. The open addressing method can be implemented
using the following:
•	 Linear Probing
•	 Quadratic Probing
•	 Double Hashing


Linear Probing
Linear probing is the simplest approach to resolving the problem of
collision in hashing. In this method, if a key is already stored at a location
generated by the hash function h(k), then the situation can be resolved by
the following hash function:

h'(k) = (h(k)+i)mod m
where h(k) = k mod m

Advantages and Disadvantages of Linear Probing
Linear probing is a very good technique, as the algorithm provides good
memory caching through good locality of address. But the main disadvantage of this method is that it results in clustering. Due to clustering, there is
a higher risk of collisions taking place. Also, the time required for searching
also increases with the size of the clusters. Now, we can say that the higher
the number of collisions, the higher the number of probes are required to
find a vacant location, and the performance is lessened. This is known as
primary clustering. We can avoid this clustering by using other techniques
such as quadratic probing and double hashing.


Quadratic Probing
Quadratic probing is another approach to resolving the problem of collision in hashing. In this method, if a key is already stored at a location generated by the hash function h(k), then the situation can be resolved by the
following hash function:

h'(k) = (h(k) + ci + ci^2) mod m
where
h(k) = k mod m
i = probe number = 0, 1, 2, ... (m-1)
c1, c2 = constants > 0

The quadratic probing method is better than linear probing, as it terminates the phenomenon of primary clustering because of its searching speed;
that is, it is doing a quadratic search. For a given key k, first the location
generated by (h(k) + 0 + 0) mod m is probed, because for the first time i = 0.
If the location generated is free, then the key is stored in it. Otherwise, subsequent positions probed are offset by the amounts/factors that depend in
a quadratic manner on the probe number i. The quadratic probing method
works better than linear probing, but to maximize the use of the hash table,
the values of m, c1, and c2 are constrained.

Advantages and Disadvantages of Quadratic Probing
As previously discussed, one of the biggest advantages of quadratic probing is that it eliminates the phenomenon of primary clustering. Yet one of the
major disadvantages of this method is that a sequence of successive probes may
only cover some portion of the hash table, and this portion may be quite small.
Therefore, if such a situation occurs, then it will be difficult for us to find an
empty location in the hash table, despite the fact that the table is not full. Hence,
quadratic probing encounters a problem which is known as secondary clustering. In this method, the chance of multiple collisions increases as the hash table
become full. This type of situation can be overcome by double hashing



Double Hashing
Double hashing is one of the best methods available for open addressing. As the name suggests, this method uses two hash functions to operate
rather than a single hash function. The hash function is given as follows:

h’(k) = (h1(k) + i*h2(k)) mod m,
where h1(k) = k mod m and h2(k) = k mod m’ are the two hash functions, m is the size of the hash table, m’ is less than m (can be (m – 1) or (m – 2)), and i is the probe number that varies from 0 to (m – 1).

For a given key
k, first the location generated by (h1(k) mod m) is probed, because for the
first time i = 0. If the location generated is free, then the key is stored in
it. Otherwise, subsequent probes generate locations that are at an offset of
(h2(k) mod m) from the previous location. Also, the offset may vary with
every probe depending upon the value generated by the second hash function, that is, (h2(k) mod m). As a result, the performance of double hashing
is very near to the performance of the “ideal” scheme of uniform hashing.

Advantages and Disadvantages of Double Hashing
The double hashing method is free from all the problems of primary
clustering and secondary clustering. It also minimizes repeated collisions.
